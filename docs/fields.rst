Fields
======

.. module:: wtforms.fields

Fields are responsible for rendering and data conversion. They delegate to
validators for data validation.

Field definitions
-----------------

Fields are defined as members on a form in a declarative fashion::

    class MyForm(Form):
        name    = TextField(u'Full Name', [validators.length(max=10)], required=True)
        address = TextAreaField(u'Mailing Address', [validators.length(max=200)], required=False)

When a field is defined on a form, the construction parameters are saved until
the form is instantiated. At form instantiation time, a copy of the field is 
made with all the parameters specified in the definition. Each instance of the
field keeps its own field data and errors list.

The label and validators can be passed to the constructor as sequential
arguments, while all other arguments should be passed as keyword arguments.
Some fields (such as :class:`SelectField`) can also take additional
field-specific keyword arguments. Consult the built-in fields reference for
information on those.


The Field base class
--------------------

.. autoclass:: Field
    :members: _validate, process_data, process_formdata 

    **Properties**

    .. attribute:: name

        The HTML form name of this field. This is the name as defined in your 
        Form prefixed with the `prefix` passed to the Form constructor.

    .. attribute:: id

        The HTML ID of this field. By default, this is auto-generated by
        appending the field's name to :attr:`~wtforms.form.Form._idprefix`

    .. attribute:: label

        This is a :class:`Label` instance which when evaluated as a string 
        returns an HTML ``<label for="id">`` construct.

    .. attribute:: description
        
        A string containing the value of the description passed in the
        constructor to the field; this is not HTML escaped.

    .. attribute:: type

        The type of this field, as a string. This can be used in your templates
        to do logic based on the type of field:

        .. code-block:: django

            {% for field in form %}
                <tr>
                {% if field.type == "BooleanField" %}
                    <td></td>
                    <td>{{ field }} {{ field.label }}</td>
                {% else %}
                    <td>{{ field.label }}</td>
                    <td>{{ field }}</td>
                {% end %}
                </tr>
            {% endfor %}

    .. attribute:: data

        Data for this field, already coerced to the python type stored by the
        field.  Not HTML escaped.

    .. attribute:: errors
        
        A list of strings with the errors for this field only.

    **Methods**

    .. automethod:: __call__
        
        If one wants to pass the "class" argument which is a reserved keyword
        in some python-based templating languages, one can do::
            
            form.field(class_="text_blob")

        This will output (for a text field):

        .. code-block:: html
            
            <input type="text" name="field_name" value="blah" class="text_blob" id="field_name" />



Built-in fields
---------------

.. autoclass:: wtforms.fields.SelectField

Custom fields
-------------

(TODO)

